# IOSUI Navigation Project

## Задача 1
Для выполнения этой работы используйте вариант вашего приложения после завершения первой работы этого модуля «Структура проекта и жизненный цикл приложения» без обновлений, 
сделанных в предыдущей работе по менеджерам зависимостей Cocoapods и Swift Package Manager. Вы уже изучили эту тему и сможете самостоятельно использовать полученные знания
в своих будущих проектах.

Добавьте новый класс User для хранения информации о пользователе со свойствами: логин, полное имя, аватар, статус. Типы для свойств — String, за исключением аватара, 
который должен иметь тип UIImage.
Добавьте новый протокол UserService с функцией, которая в качестве аргумента принимает логин и возвращает объект класса User?. То есть, в случае неверного логина, 
пользователь не будет авторизован.
Добавьте новый класс CurrentUserService, который поддерживает протокол UserService. Класс должен хранить объект класса User и возвращать его в функции, реализующей протокол, 
если, конечно, переданный логин соответствует логину имени пользователя. Подумайте, как инициализировать класс CurrentUserService со свойством — экземпляром класса User.
В существующий класс ProfileViewController добавьте свойство типа User и сделайте отображение этой информации на экране профиля, включая изображение аватара.
В класс LoginViewController добавьте функциональность получения информации о пользователе, используя логин через CurrentUserService и передачу этой информации в 
ProfileViewController.
Проверьте, что ваша новая функциональность работает: если введён корректный логин, то информация о пользователе передаётся на экран профиля и там отображается.
Если логин неверный, то должно выводиться сообщение о некорректных данных и перехода на профиль в этом случае не должно происходить.

## Задача 2
Смоделируем случай, когда в схеме Debug, которая была создана по результатам первой домашней работы, вводится тестовый логин.
Добавьте новый класс TestUserService, который также поддерживает протокол UserService. Класс должен хранить объект класса User с тестовыми данными и возвращать его 
в реализации протокола.
С помощью флага компиляции #DEBUG сделайте проверку текущей схемы и в зависимости от сборки Release или Debug при проверке логина передавайте в ProfileViewController 
пользователя, полученного через сервис CurrentUserService или TestUserService. Используйте возможности полиморфного поведения объектов, обеспечиваемых протокольно-ориентированным
программированием.
Проверьте, что теперь в профиль передаётся корректная информация в зависимости от сборки Release или Debug.
